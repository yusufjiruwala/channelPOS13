/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * reportPanel.java
 *
 * Created on 02/05/2010, 12:56:46 Ù…
 */
package com.forms.panels;

import ar.com.fdvs.dj.core.DynamicJasperHelper;
import ar.com.fdvs.dj.core.layout.ClassicLayoutManager;
import ar.com.fdvs.dj.domain.DJCalculation;
import ar.com.fdvs.dj.domain.DynamicReport;
import ar.com.fdvs.dj.domain.builders.ColumnBuilder;
import ar.com.fdvs.dj.domain.builders.DynamicReportBuilder;
import ar.com.fdvs.dj.domain.builders.GroupBuilder;
import ar.com.fdvs.dj.domain.constants.GroupLayout;
import ar.com.fdvs.dj.domain.entities.DJGroup;
import ar.com.fdvs.dj.domain.entities.columns.AbstractColumn;
import ar.com.fdvs.dj.domain.entities.columns.PropertyColumn;
import com.forms.MainFrame;
import com.generic.model.DBClass;
import com.generic.model.dataCell;
import com.generic.model.localTableModel;
import com.generic.model.qryColumn;
import com.generic.utils.DynamicReportSetting;
import com.generic.utils.Parameter;
import com.generic.utils.QueryExe;
import com.generic.utils.XTableColumnModel;
import com.generic.utils.utils;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.File;
import java.math.BigDecimal;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRField;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.swing.JRViewer;

/**
 *
 * @author yusuf
 */
public class reportPanel extends javax.swing.JPanel {

    private javax.swing.table.DefaultTableModel dfltmodel = new javax.swing.table.DefaultTableModel();
    private frmSelReturned fsr = null;

    /** Creates new form reportPanel */
    public reportPanel() {
        initComponents();
        utils.setupFormTextBoxes(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel13 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel15 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        listReports = new javax.swing.JList();
        jPanel14 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        cmdquery = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        pnl_main = new javax.swing.JPanel();
        pnlParas1 = new javax.swing.JPanel();
        pnl_paras = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        txtReportfilter = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        cmdOpenVou = new javax.swing.JButton();
        cmdReprint2 = new javax.swing.JButton();
        cmdReprint = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        reportViewer = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        txtSum = new javax.swing.JLabel();

        jTabbedPane1.setFont(new java.awt.Font("Arial", 0, 16));

        jSplitPane1.setDividerLocation(250);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        listReports.setFont(new java.awt.Font("Tahoma", 0, 18));
        listReports.setModel(new DefaultListModel());
        listReports.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listReportsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listReports);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jComboBox1, 0, 249, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel15);

        jPanel16.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        cmdquery.setText("Query");
        cmdquery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdqueryActionPerformed(evt);
            }
        });
        jPanel16.add(cmdquery);

        jButton15.setText("Preview");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        jPanel16.add(jButton15);

        cmdPrint.setText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        jPanel16.add(cmdPrint);

        pnl_main.setLayout(new java.awt.GridLayout(1, 2));

        pnlParas1.setLayout(new java.awt.BorderLayout());

        pnl_paras.setLayout(new java.awt.GridBagLayout());
        pnlParas1.add(pnl_paras, java.awt.BorderLayout.NORTH);

        pnl_main.add(pnlParas1);

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );

        pnl_main.add(jPanel17);

        jScrollPane5.setViewportView(pnl_main);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(226, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel14);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 838, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Reports", jPanel13);

        jPanel8.setAlignmentX(0.0F);
        jPanel8.setAlignmentY(0.0F);
        jPanel8.setLayout(new java.awt.GridLayout(1, 0, 10, 0));
        jPanel8.add(txtReportfilter);

        jButton1.setText("Filter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton1);

        jButton3.setText("Print");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton3);

        jButton6.setText("Main Screen");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton6);

        cmdOpenVou.setText("Open Voucher");
        cmdOpenVou.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenVouActionPerformed(evt);
            }
        });
        jPanel8.add(cmdOpenVou);

        cmdReprint2.setText("Generate Return");
        cmdReprint2.setMargin(new java.awt.Insets(2, 0, 2, 0));
        cmdReprint2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReprint2ActionPerformed(evt);
            }
        });
        jPanel8.add(cmdReprint2);

        cmdReprint.setText("Re-Print Voucher");
        cmdReprint.setMargin(new java.awt.Insets(2, 0, 2, 0));
        cmdReprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReprintActionPerformed(evt);
            }
        });
        jPanel8.add(cmdReprint);

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 12));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setRowHeight(25);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 811, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Store balance report", jPanel1);

        javax.swing.GroupLayout reportViewerLayout = new javax.swing.GroupLayout(reportViewer);
        reportViewer.setLayout(reportViewerLayout);
        reportViewerLayout.setHorizontalGroup(
            reportViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 838, Short.MAX_VALUE)
        );
        reportViewerLayout.setVerticalGroup(
            reportViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 467, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Preview", reportViewer);

        txtSum.setBackground(java.awt.Color.yellow);
        txtSum.setFont(new java.awt.Font("Tahoma", 0, 18));
        txtSum.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtSum.setText("Total : ");
        txtSum.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(-16777216,true)));
        txtSum.setOpaque(true);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 833, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(txtSum, javax.swing.GroupLayout.DEFAULT_SIZE, 823, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 55, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(txtSum, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            tbModel.setDynamicFilter(txtReportfilter.getText());
            jTable1.updateUI();
            txtReportfilter.requestFocus();
        } catch (Exception ex) {
            Logger.getLogger(reportPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        cmdPrint.doClick();
    }//GEN-LAST:event_jButton3ActionPerformed
    public void open_vou() {
        if (Double.valueOf(tbModel.getFieldValue(jTable1.getSelectedRow(), "AMOUNT").toString()) > 0) {
            String s = tbModel.getFieldValue(jTable1.getSelectedRow(), "KEYFLD").toString();
            parentJf.getSp().load_data(s);
            parentJf.getCmdSales().doClick();
        } else {
            String s = tbModel.getFieldValue(jTable1.getSelectedRow(), "KEYFLD").toString();

            parentJf.getCmdReturn().doClick();
            parentJf.getSpr().load_data(s);
            parentJf.getCmdReturn().doClick();

        }
    }

    public void print_vou() {
        if (Double.valueOf(tbModel.getFieldValue(jTable1.getSelectedRow(), "AMOUNT").toString()) > 0) {
            String s = tbModel.getFieldValue(jTable1.getSelectedRow(), "KEYFLD").toString();
            parentJf.getSp().print_data(Double.valueOf(s));
        }
        if (Double.valueOf(tbModel.getFieldValue(jTable1.getSelectedRow(), "AMOUNT").toString()) < 0) {
            String s = tbModel.getFieldValue(jTable1.getSelectedRow(), "KEYFLD").toString();
            parentJf.getSpr().print_data(Double.valueOf(s));
        }


    }
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        getDataStoreBalance();

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        cmdquery.doClick();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        try {
            printReport(((dataCell) listReports.getSelectedValue()).getValue().toString());
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(parentJf, ex.getMessage());
        }
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void listReportsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listReportsValueChanged
        try {
            String repid = ((dataCell) listReports.getSelectedValue()).getValue().toString();
            show_params(repid);
        } catch (SQLException ex) {
            JOptionPane.showConfirmDialog(parentJf, ex);
            Logger.getLogger(reportPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_listReportsValueChanged

    private void cmdqueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdqueryActionPerformed
        execQuery();
        if (rep_file_name.isEmpty()) {
            jTabbedPane1.setSelectedComponent(jPanel1);
        } else {
            jTabbedPane1.setSelectedComponent(reportViewer);
        }
    }//GEN-LAST:event_cmdqueryActionPerformed

    private void cmdOpenVouActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenVouActionPerformed
        open_vou();
    }//GEN-LAST:event_cmdOpenVouActionPerformed

    private void cmdReprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReprintActionPerformed
        print_vou();
    }//GEN-LAST:event_cmdReprintActionPerformed

    private void cmdReprint2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReprint2ActionPerformed
        try {
            /*
            if (Double.valueOf(tbModel.getFieldValue(jTable1.getSelectedRow(), "AMOUNT").toString()) > 0) {
            try {
            String s = tbModel.getFieldValue(jTable1.getSelectedRow(), "KEYFLD").toString();
            parentJf.getCmdReturn().doClick();
            parentJf.getSpr().load_data("");
            PreparedStatement pst = dbc.getDbConnection().prepareStatement
            ("select refer,allqty/pack pack_qty from pospur2 where keyfld=" + s,
            ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rst = pst.executeQuery();
            rst.beforeFirst();
            while (rst.next()) {
            parentJf.getSpr().txtItemCode.setText(rst.getString("REFER"));
            parentJf.getSpr().txtItemQty.setText(rst.getString("pack_qty"));
            parentJf.getSpr().addUpdate();
            }
            pst.close();
            } catch (Exception ex) {
            Logger.getLogger(reportPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
             *
             */
            if (fsr == null) {
                fsr = new frmSelReturned(parentJf, true);
            }
            String s = tbModel.getFieldValue(jTable1.getSelectedRow(), "KEYFLD").toString();
            String c = utils.getSqlValue("select invoice_code from POSPUR1 WHERE KEYFLD='"
                    + tbModel.getFieldValue(jTable1.getSelectedRow(), "KEYFLD").toString()
                    + "'", dbc.getDbConnection());
            if (c.equals("20")) {
                JOptionPane.showMessageDialog(this, "Return can't generate from return");
                return;
            }
            fsr.OpenReturn(Double.valueOf(s));
        } catch (Exception ex) {
            Logger.getLogger(reportPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_cmdReprint2ActionPerformed

    public void show_params(String repid) throws SQLException {
        listParas.clear();
        pnl_paras.removeAll();
        pnl_paras.updateUI();
        PreparedStatement pst = dbc.getDbConnection().prepareStatement("select PARAM_NAME, PARA_TYPE,"
                + " PARA_DEFAULT, PARA_DESCR, "
                + " PARA_LIST, PARA_LABEL,MAX(POS) POS from pos_reps_paras "
                + " where (repid=? OR 'ALL'=?)  "
                + " GROUP BY PARAM_NAME, PARA_TYPE, PARA_DEFAULT, "
                + " PARA_DESCR, PARA_LIST, PARA_LABEL ORDER BY POS",
                ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        pst.setString(1, repid);
        pst.setString(2, repid);
        ResultSet rst = pst.executeQuery();

        rst.beforeFirst();
        while (rst.next()) {
            Parameter pm = new Parameter(rst.getString("PARAM_NAME"), rst.getString("PARA_DEFAULT"));
            String strStore = "";
            if (mapDefaultParas.get(pm.getName().toUpperCase()) != null) {
                strStore = mapDefaultParas.get(pm.getName().toUpperCase());
            }
            if (rst.getString("PARA_TYPE").equalsIgnoreCase("VARCHAR2")) {
                pm.setValueType(Parameter.DATA_TYPE_STRING);
            }
            if (rst.getString("PARA_TYPE").equalsIgnoreCase("DATE")) {
                pm.setValueType(Parameter.DATA_TYPE_DATE);
            }
            if (rst.getString("PARA_TYPE").equalsIgnoreCase("NUMBER")) {
                pm.setValueType(Parameter.DATA_TYPE_NUMBER);
            }

            if (rst.getString("PARA_LIST") != null && !rst.getString("PARA_LIST").isEmpty()) {
                pm.setLovsql(rst.getString("PARA_LIST"));
            }

            if (strStore.length() == 0 && rst.getString("PARA_DEFAULT").startsWith("#")) {
                pm.setValue(parentJf.getMapVars().get(rst.getString("PARA_DEFAULT").substring(1)));
            }

            if (strStore.length() == 0 && rst.getString("PARA_DEFAULT").startsWith("$TODAY")) {
                SimpleDateFormat sdf = new SimpleDateFormat(utils.FORMAT_SHORT_DATE);
                pm.setValue(new Date(System.currentTimeMillis()));
            }
            if (strStore.length() > 0) {
                try {
                    if (pm.getValueType().equals(Parameter.DATA_TYPE_DATE)) {
                        SimpleDateFormat sdf = new SimpleDateFormat(utils.FORMAT_SHORT_DATE);
                        pm.setValue(sdf.parse(strStore));
                    }
                    if (pm.getValueType().equals(Parameter.DATA_TYPE_NUMBER)) {
                        NumberFormat nf = NumberFormat.getInstance();
                        pm.setValue(nf.parse(strStore));
                    }
                    if (pm.getValueType().equals(Parameter.DATA_TYPE_STRING)) {
                        pm.setValue(strStore);
                    }
                } catch (ParseException ex) {
                    ex.printStackTrace();
                }
            }

            pm.setDescription(rst.getString("PARA_LABEL"));
            listParas.add(pm);
        }
        GridBagConstraints gc = new GridBagConstraints();
        int i = 0;
        for (Iterator<Parameter> it = listParas.iterator(); it.hasNext();) {
            final Parameter pm = it.next();
            String s = "";
            if (pm.getValue() != null) {
                s = pm.getValue().toString();
            }
            final JLabel lb = new JLabel(pm.getDescription());

            gc.gridx = 0;
            gc.gridy = i;
            gc.insets = new Insets(10, 10, 10, 10);
            gc.gridwidth = 1;
            gc.weightx = 0.0;
            gc.fill = GridBagConstraints.HORIZONTAL;
            pnl_paras.add(lb, gc);

            if (!pm.getLovsql().isEmpty()) {
                final JComboBox tf = new JComboBox();
                utils.fillComboBox(tf, null, pm.getLovsql(), dbc.getDbConnection());
                gc.gridx = 1;
                gc.gridy = i++;
                gc.insets = new Insets(10, 10, 10, 10);
                pnl_paras.add(tf, gc);
                if (pm.getValue() != null) {
                    tf.setSelectedItem(utils.findByValue(tf, pm.getValue().toString()));
                }
                tf.addFocusListener(new FocusListener() {

                    public void focusGained(FocusEvent e) {
                    }

                    public void focusLost(FocusEvent e) {
                        pm.setValue(((dataCell) tf.getSelectedItem()).getValue().toString());
                        mapDefaultParas.put(pm.getName().toUpperCase(), pm.getValue().toString());
                    }
                });
                tf.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        pm.setValue(((dataCell) tf.getSelectedItem()).getValue().toString());
                        mapDefaultParas.put(pm.getName().toUpperCase(), pm.getValue().toString());
                    }
                });
            } else {
                final JTextField tf = new JTextField(s);
                pm.setUIObject(tf);
                tf.setColumns(20);
                tf.addFocusListener(new FocusListener() {

                    public void focusGained(FocusEvent e) {
                    }

                    public void focusLost(FocusEvent e) {

                        if (pm.getValueType().equals(Parameter.DATA_TYPE_DATE)) {
                            SimpleDateFormat df = new SimpleDateFormat(utils.FORMAT_SHORT_DATE);
                            try {
                                Date d = df.parse(tf.getText());
                                tf.setText(df.format(d));
                                pm.setValue(df.parse(tf.getText()));
                                mapDefaultParas.put(pm.getName().toUpperCase(), tf.getText());
                            } catch (ParseException ex) {
                                ex.printStackTrace();
                                JOptionPane.showMessageDialog(parentJf, ex);
                                tf.requestFocus();
                            }
                        }
                        if (pm.getValueType().equals(Parameter.DATA_TYPE_NUMBER)) {
                            try {
                                NumberFormat df = NumberFormat.getInstance();
                                Number d = df.parse(tf.getText());
                                tf.setText(df.format(d));
                                pm.setValue(df.parse(tf.getText()));
                                mapDefaultParas.put(pm.getName().toUpperCase(), tf.getText());
                            } catch (ParseException ex) {
                                ex.printStackTrace();
                                JOptionPane.showMessageDialog(parentJf, ex);
                                tf.requestFocus();
                            }

                        }
                        if (pm.getValueType().equals(Parameter.DATA_TYPE_STRING)) {
                            pm.setValue(tf.getText());
                            mapDefaultParas.put(pm.getName().toUpperCase(), tf.getText());
                        }
                    }
                });


                tf.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {

                        if (pm.getValueType().equals(Parameter.DATA_TYPE_DATE)) {
                            SimpleDateFormat df = new SimpleDateFormat(utils.FORMAT_SHORT_DATE);

                            try {
                                Date d = df.parse(tf.getText());
                                tf.setText(df.format(d));
                                pm.setValue(df.parse(tf.getText()));
                                mapDefaultParas.put(pm.getName().toUpperCase(), tf.getText());
                            } catch (ParseException ex) {
                                ex.printStackTrace();
                                JOptionPane.showMessageDialog(parentJf, ex);
                                tf.requestFocus();
                            }
                        }
                        if (pm.getValueType().equals(Parameter.DATA_TYPE_NUMBER)) {
                            try {
                                NumberFormat df = NumberFormat.getInstance();
                                Number d = df.parse(tf.getText());
                                tf.setText(df.format(d));
                                pm.setValue(df.parse(tf.getText()));
                                mapDefaultParas.put(pm.getName().toUpperCase(), tf.getText());
                            } catch (ParseException ex) {
                                ex.printStackTrace();
                                JOptionPane.showMessageDialog(parentJf, ex);
                                tf.requestFocus();
                            }

                        }
                        if (pm.getValueType().equals(Parameter.DATA_TYPE_STRING)) {
                            pm.setValue(tf.getText());
                            mapDefaultParas.put(pm.getName().toUpperCase(), tf.getText());
                        }
                    }

                    ;
                });

                gc.gridx = 1;
                gc.gridy = i++;
                gc.insets = new Insets(10, 10, 10, 10);
                pnl_paras.add(tf, gc);
                if (pm.getValue() != null) {
                    if (pm.getValueType().equals(Parameter.DATA_TYPE_DATE)) {
                        SimpleDateFormat df = new SimpleDateFormat(utils.FORMAT_SHORT_DATE);
                        tf.setText(df.format((Date) pm.getValue()));
                    } else {
                        tf.setText(pm.getValue().toString());
                    }

                }
            }

            pnl_paras.updateUI();

        }
        utils.setupFormTextBoxes(pnl_paras);
    }

    public void customIntialize(MainFrame mf) {
        if (dbc == null) {
            try {
                parentJf = mf;
                jTable1.setColumnModel(new XTableColumnModel());
                dbc = tbModel.createDBClassFromConnection(parentJf.getDbConneciton());
                sdf = new SimpleDateFormat(parentJf.getMapVars().get("short_date_format"));
                decf = new DecimalFormat(parentJf.getMapVars().get("money_number"));
                loadList();
                if (parentJf.getSp().itemsRows == null) {
                    parentJf.getCmdSales().doClick();
                    parentJf.getCmdReports().doClick();
                    parentJf.getRp().updateUI();
                }

                if (parentJf.getSpr().itemsRows == null) {
                    //parentJf.getCmdReturn().doClick();
                    parentJf.getSpr().setParentJF(parentJf);
                    if (parentJf.getSpr().getItemsRows() == null) {
                        parentJf.getSpr().start_showItems();
                    }

                    parentJf.getCmdReports().doClick();
                    parentJf.getRp().updateUI();
                }

            } catch (SQLException ex) {
                Logger.getLogger(closeSalesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        jTabbedPane1.setSelectedIndex(0);
    }

    public void execQuery() {
        String repid = ((dataCell) listReports.getSelectedValue()).getValue().toString();
        execQuery(repid);
    }
    private String rep_file_name = "";
    private String sql = "";

    public void execQuery(String repid) {
        parentJf.kf.setVisible(false);
        sql = "";
        rep_file_name = "";
        try {
            PreparedStatement ps1 = dbc.getDbConnection().prepareStatement("select *from pos_reps_header where repid='" + repid + "'", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs1 = ps1.executeQuery();
            if (!rs1.first()) {
                ps1.close();
                throw new SQLException("Can not load data for report,");
            }
            if (rs1.getString("rep_sql") != null) {
                sql = rs1.getString("rep_sql");
            } else {
                sql = "";
            }

            cmdOpenVou.setEnabled(false);
            cmdReprint.setEnabled(false);

            if (rs1.getString("OPEN_VOU").startsWith("Y")) {
                cmdOpenVou.setEnabled(true);
            }
            if (rs1.getString("REPRINT_VOU").startsWith("Y")) {
                cmdReprint.setEnabled(true);
            }
            if (rs1.getString("REPNAMEA") != null) {
                rep_file_name = rs1.getString("REPNAMEA");
            }
            ps1.close();
            if (!sql.isEmpty()) {
                QueryExe qe = new QueryExe(sql, dbc.getDbConnection());
                qe.getMapParas().clear();
                for (Iterator<Parameter> it = listParas.iterator(); it.hasNext();) {
                    Parameter parameter = it.next();
                    qe.getMapParas().put(parameter.getName(), parameter);
                }
                tbModel.clearALl();
                tbModel.appendRows(qe.convertRows());
                tbModel.getQrycols().addAll(qe.getColumnsList());
                tbModel.setAllColVisible(true);
                jTable1.getColumnModel().setColumnSelectionAllowed(false);
                jTable1.getTableHeader().setReorderingAllowed(false);
                jTable1.setModel(dfltmodel);
                PreparedStatement pst = dbc.getDbConnection().prepareStatement("select *from POS_REP_COLS WHERE REPID='" + repid + "'", ResultSet.TYPE_SCROLL_INSENSITIVE,
                        ResultSet.CONCUR_READ_ONLY);
                ResultSet rstx = pst.executeQuery();
                rstx.beforeFirst();
                String sumtxt = "Sum : ";
                while (rstx.next()) {
                    qryColumn qc = tbModel.getColByName(rstx.getString("COL_NAME"));
                    if (qc != null) {
                        qc.setWidth(rstx.getInt("COLWIDTH"));
                        if (rstx.getString("COL_TITLE") != null) {
                            qc.setTitle(rstx.getString("COL_TITLE"));
                        }
                    }
                    if (qc != null && qc.isNumber() && rstx.getString("COL_FORMAT") != null) {
                        if (rstx.getString("COL_FORMAT").equals("MONEY_FORMAT")) {
                            qc.setNumberFormat(utils.FORMAT_MONEY);
                        }
                        if (rstx.getString("COL_FORMAT").equals("QTY_FORMAT")) {
                            qc.setNumberFormat(utils.FORMAT_QTY);
                        }
                        if (!rstx.getString("COL_FORMAT").equals("QTY_FORMAT") && !rstx.getString("COL_FORMAT").equals("MONEY_FORMAT")) {
                            qc.setNumberFormat(rstx.getString("COL_FORMAT"));
                        }
                    }
                    if (qc != null && qc.isDate() && rstx.getString("COL_FORMAT") != null) {
                        if (rstx.getString("COL_FORMAT").equals("SHORT_DATE_FORMAT")) {
                            qc.setDateFormat(utils.FORMAT_SHORT_DATE);
                        }
                        if (rstx.getString("COL_FORMAT").equals("LONG_DATE_FORMAT")) {
                            qc.setDateFormat(utils.FORMAT_LONG_DATE);
                        }
                        if (!rstx.getString("COL_FORMAT").equals("LONG_DATE_FORMAT") && !rstx.getString("COL_FORMAT").equals("SHORT_DATE_FORMAT")) {
                            qc.setDateFormat(rstx.getString("COL_FORMAT"));
                        }
                    }
                    if (qc != null && rstx.getString("COL_HIDE").startsWith("Y")) {
                        tbModel.getVisbleQrycols().remove(qc);
                    }

                    if (qc != null && rstx.getString("HAS_SUMMARY").startsWith("Y")) {
                        String vl = "";
                        if (!qc.getNumberFormat().isEmpty()) {
                            vl = (new DecimalFormat(qc.getNumberFormat())).format(tbModel.getSummaryOf(qc.getColname(), localTableModel.SUMMARY_SUM));
                        } else {
                            vl = String.valueOf(tbModel.getSummaryOf(qc.getColname(), localTableModel.SUMMARY_SUM));
                        }
                        sumtxt = sumtxt + qc.getColname() + " =  " + vl + ",";
                    }

                }
                pst.close();
                txtSum.setText(sumtxt);
                jTable1.setModel(tbModel);
                tbModel.setEditAllowed(false);

                for (int colx = 0; colx
                        < jTable1.getModel().getColumnCount(); colx++) {
                    jTable1.getColumnModel().getColumn(colx).setCellRenderer(new ColorRenderer(true));

                }
                jTable1.revalidate();
                jTable1.updateUI();
            } // if sql.isempty
            else {
                print_rep_file();
                /*
                JFrame frame = new JFrame("Report");
                frame.getContentPane().add(new JRViewer(jasperPrint));
                frame.pack();
                frame.setVisible(true);
                frame.setAlwaysOnTop(true);
                frame.setLocationRelativeTo(null);

                 *
                 */
            }
        } catch (Exception ex) {
            Logger.getLogger(reportPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(parentJf, ex.getMessage());
        }
    }

    public void printReport(String std) throws Exception {
        DynamicReportSetting st = new DynamicReportSetting();
        st.doStandard();
        int pf = 255;
        if (parentJf.getMapVars().get("REPORT_PAGE_WIDTH") != null) {
            pf = Integer.valueOf(parentJf.getMapVars().get("REPORT_PAGE_WIDTH"));
        }
        st.setPageWidth(pf);
        st.setIgnorePagination(true);
        st.setOrientation(DynamicReportSetting.CUSTOM_ORIENTATION);
        if (!std.equals("ALL")) {
            st.setTitle(listReports.getSelectedValue().toString());
            execQuery();
            if (rep_file_name.isEmpty()) {
                printData(tbModel, st);
            }
            return;
        } else {
            for (int i = 1; i < listReports.getModel().getSize(); i++) {
                dataCell dc = (dataCell) listReports.getModel().getElementAt(i);
                st.setTitle(dc.toString());
                String rep = (dc.getValue().toString());
                execQuery(rep);
                if (rep_file_name.isEmpty()) {
                    printData(tbModel, st);
                }
            }
        }
    }

    public void printData(final localTableModel data, DynamicReportSetting reportSetting) throws Exception {
        String fl1 = "tmp";
        final String fl = fl1.replace("\\", "/");
        Map<String, String> parameter = new HashMap<String, String>();
        byte b[] = null;
        final JRDataSource jr = new JRDataSource() {

            private int irow = 0;

            public boolean next() throws JRException {
                irow++;
                if (irow > data.getRows().size()) {
                    return false;
                }
                return true;
            }

            public Object getFieldValue(JRField j) throws JRException {
                Object val = data.getFieldValue(irow - 1, j.getName());
                return val;
            }
        };

        // --------STYLES
        DynamicReportBuilder drb = new DynamicReportBuilder();
        Map<String, AbstractColumn> mapCols = new HashMap<String, AbstractColumn>();

        for (int i = 0; i < data.getVisbleQrycols().size(); i++) {
            String title = data.getVisbleQrycols().get(i).getTitle();
            String name = data.getVisbleQrycols().get(i).getColname();
            Integer width = data.getVisbleQrycols().get(i).getWidth();
            AbstractColumn col1 = ColumnBuilder.getNew().setColumnProperty(
                    name, String.class.getName()).setTitle(title).setWidth(
                    width).setFixedWidth(false).build();
            if (data.getVisbleQrycols().get(i).isNumber()) {
                col1 = ColumnBuilder.getNew().setColumnProperty(name,
                        BigDecimal.class.getName()).setTitle(title).build();
                if (data.getVisbleQrycols().get(i).getNumberFormat().length() > 0) {
                    col1.setPattern(data.getVisbleQrycols().get(i).getNumberFormat());
                    col1.setStyle(reportSetting.getStyleNumber());
                }
            }
            if (data.getVisbleQrycols().get(i).getDateFormat().length() > 0) {
                col1 = ColumnBuilder.getNew().setColumnProperty(name,
                        java.sql.Timestamp.class.getName()).setTitle(title).build();
                col1.setPattern(data.getVisbleQrycols().get(i).getDateFormat());
            }

            drb.addColumn(col1);
            if (data.getVisbleQrycols().get(i).isNumber()) {
                drb.addGlobalFooterVariable(col1, DJCalculation.SUM,
                        reportSetting.getStyleNumber2());
                drb.setGrandTotalLegend("Grand Total");
                drb.setGrandTotalLegendStyle(reportSetting.getStyleDetail());
            }
            mapCols.put(name, col1);
        }
        reportSetting.getListParams().clear();
        reportSetting.getListParams().addAll(listParas);

        reportSetting.wrapReport(drb, true);
        // GROUPING
        int cnt = 0;
        for (Iterator iterator = listGroupsBy.iterator(); iterator.hasNext();) {
            String fldname = (String) iterator.next();
            AbstractColumn col = mapCols.get(fldname);
            if (col == null) {
                mapCols.put(fldname, ColumnBuilder.getNew().setColumnProperty(
                        fldname, String.class.getName()).setTitle("").build());
                col = mapCols.get(fldname);
                drb.addColumn(mapCols.get(fldname));
            }
            col.setStyle(reportSetting.getStyleGroup());
            GroupBuilder grp = new GroupBuilder();
            grp.setCriteriaColumn((PropertyColumn) col);
            grp.setHeaderHeight(new Integer(30));
            if (cnt == 0) {
                for (int k = 0; k < listGroupSum.size(); k++) {
                    AbstractColumn numcol = mapCols.get(listGroupSum.get(k));
                    if (data.getColByName(listGroupSum.get(k)).isNumber()) {
                        grp.addFooterVariable(numcol, DJCalculation.SUM,
                                reportSetting.getStyleNumber2());
                    }
                }
            }
            grp.setGroupLayout(GroupLayout.VALUE_IN_HEADER);
            DJGroup g = grp.build();
            g.setDefaulHeaderVariableStyle(reportSetting.getStyleDetail());
            drb.addGroup(g);
            cnt++;
        }
        drb.setAllowDetailSplit(false);
        drb.setUseFullPageWidth(true);

        drb.setPrintColumnNames(true);
        DynamicReport dr = drb.build();
        //DynamicJasperHelper.generateJRXML(dr, new ClassicLayoutManager(),
//                parameter, "UTF-8", fl + ".jrxml");

        JasperPrint jp = DynamicJasperHelper.generateJasperPrint(dr, new ClassicLayoutManager(), jr);
        if (jp.getPages().size() <= 0) {
            return;
        }
        JasperPrintManager.printReport(jp, false);
    }

    public void getDataStoreBalance() {
        try {
            txtSum.setText("");
            jTabbedPane1.setSelectedIndex(0);
            tbModel.clearALl();
            tbModel.executeQuery("select i2.descr, s.refer,i.descr,(s.qty+(s.pos_in-s.pos_out)/i.pack) balance"
                    + " from stori s,items i,items i2 where i.reference=s.refer and i2.reference=i.parentitem and "
                    + " s.strno='" + parentJf.getMapVars().get("DEFAULT_STORE") + "'", true);
            tbModel.setEditAllowed(false);
            jTable1.getColumnModel().setColumnSelectionAllowed(false);
            jTable1.getTableHeader().setReorderingAllowed(false);
            jTable1.setModel(dfltmodel);
            jTable1.setModel(tbModel);
            for (int colx = 0; colx
                    < jTable1.getModel().getColumnCount(); colx++) {
                jTable1.getColumnModel().getColumn(colx).setCellRenderer(new ColorRenderer(true));




            }
            jTable1.revalidate();
            jTable1.updateUI();











        } catch (SQLException ex) {
            Logger.getLogger(reportPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(parentJf, ex.getMessage());
        }








    }

    public void loadList() {
        try {
            PreparedStatement pst = dbc.getDbConnection().prepareStatement("select repid,repname from POS_REPS_HEADER order by repid", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rst = pst.executeQuery();
            rst.beforeFirst();




            ((DefaultListModel) listReports.getModel()).removeAllElements();




            ((DefaultListModel) listReports.getModel()).addElement(new dataCell("ALL", "ALL"));




            while (rst.next()) {
                dataCell dc = new dataCell(rst.getString("repname"), rst.getString("repid"));




                ((DefaultListModel) listReports.getModel()).addElement(dc);




            }
        } catch (SQLException ex) {
            JOptionPane.showConfirmDialog(parentJf, ex);
            Logger.getLogger(reportPanel.class.getName()).log(Level.SEVERE, null, ex);
        }









    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdOpenVou;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdReprint;
    private javax.swing.JButton cmdReprint2;
    private javax.swing.JButton cmdquery;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JList listReports;
    private javax.swing.JPanel pnlParas1;
    private javax.swing.JPanel pnl_main;
    private javax.swing.JPanel pnl_paras;
    private javax.swing.JPanel reportViewer;
    private javax.swing.JTextField txtReportfilter;
    private javax.swing.JLabel txtSum;
    // End of variables declaration//GEN-END:variables
    private MainFrame parentJf = null;
    private localTableModel tbModel = new localTableModel();
    private DBClass dbc = null;
    private SimpleDateFormat sdf = null;
    private DecimalFormat decf = null;
    List<Parameter> listParas = new ArrayList<Parameter>();
    Map<String, String> mapDefaultParas = new HashMap<String, String>();
    private List<String> listGroupsBy = new ArrayList<String>();
    private List<String> listGroupSum = new ArrayList<String>();

    private void print_rep_file() throws Exception {
        Map<String, Object> mp = new HashMap<String, Object>();
        for (Iterator<Parameter> it = listParas.iterator(); it.hasNext();) {
            Parameter p = it.next();
            mp.put(p.getName(), p.getValue());
        }
        mp.put("COMPANY_NAME", parentJf.getMapVars().get("COMPANY_NAME"));
        mp.put("COMPANY_SPECS", parentJf.getMapVars().get("COMPANY_SPEC"));
        mp.put("LOCATION_CODE", parentJf.getMapVars().get("DEFAULT_LOCATION"));
        mp.put("LOCATION_NAME", parentJf.getMapVars().get("LOCATION_NAME"));
        mp.put("CP_USER", parentJf.getLp().getTxtUsername().getText());

        reportViewer.removeAll();
        JScrollPane js = new JScrollPane();
        //reportViewer.add(js);
        JasperReport report = (JasperReport) JRLoader.loadObject(new File(rep_file_name));
        JasperPrint jasperPrint = JasperFillManager.fillReport(report, mp, dbc.getDbConnection());
        JRViewer jr = new JRViewer(jasperPrint);
        reportViewer.add(jr);
        jr.setLocation(0, 0);
        jr.setSize(reportViewer.getWidth() - 2, reportViewer.getHeight() - 2);
    }
}
