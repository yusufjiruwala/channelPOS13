/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmDelivery.java
 *
 * Created on Apr 16, 2014, 3:42:01 PM
 */
package com.forms.panels;

import com.forms.MainFrame;
import com.forms.lovDialog;
import com.generic.model.Row;
import com.generic.model.localTableModel;
import com.generic.model.qryColumn;
import com.generic.utils.NumberEditor;
import com.generic.utils.QueryExe;
import com.generic.utils.utils;
import com.keyboard.KeyBoardFrame;
import com.keyboard.KeyBoardSelectionListner;
import com.keyboard.keyboardViewer;
import com.lov.selectListView;
import java.awt.Color;
import java.awt.KeyboardFocusManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Yusuf
 */
public class frmDelivery extends javax.swing.JDialog {

    private double keyfld = -1;
    private localTableModel payRows = new localTableModel(5);
    public double sumPaidAmt = 0;
    public double sumNetAmt = 0;
    public double sumCashAmt = 0;

    /** Creates new form frmDelivery */
    public frmDelivery(double kf, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        this.keyfld = kf;
        setParentJf((MainFrame) parent);
        utils.setupFormTextBoxes(getRootPane().getContentPane());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlBasic = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        adrDeliveryDate = new javax.swing.JTextField();
        adrHour = new javax.swing.JSpinner();
        adrMin = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        adrCustomerName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        chkPickup = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        adrArea = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        adrPhone = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        adrBlock = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        adrOtherTel = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        adrStreet = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        adrJedda = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        adrBldg = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        adrFloorNo = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        adrWorkAddress = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        adrNotes = new javax.swing.JTextArea();
        adrEmail = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        pnlRecipt = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        adrRArea = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        adrRPhone = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        adrRBlock1 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        adrROtherTel = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        adrRStreet = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        adrRJedda = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        adrRBldg = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        adrRFloorNo = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        adrRWorkAddress = new javax.swing.JTextField();
        chkRCopyClient = new javax.swing.JCheckBox();
        pnlAdvPayment = new javax.swing.JPanel();
        pnlMultiplePay = new javax.swing.JPanel();
        sumTxtPaidAmt = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        payTable = new javax.swing.JTable();
        msg = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        pnlKb = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(-16711936,true));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                frmDelivery.this.windowOpened(evt);
            }
        });

        jTabbedPane1.setBackground(new java.awt.Color(-1,true));
        jTabbedPane1.setFont(new java.awt.Font("Dialog", 0, 18));
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        pnlBasic.setBackground(new java.awt.Color(-1,true));
        pnlBasic.setToolTipText("");

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Delivery Date Time");

        adrDeliveryDate.setMaximumSize(null);
        adrDeliveryDate.setMinimumSize(null);
        adrDeliveryDate.setPreferredSize(new java.awt.Dimension(50, 50));
        adrDeliveryDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adrDeliveryDateActionPerformed(evt);
            }
        });
        adrDeliveryDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                frmDelivery.this.focusGained(evt);
            }
        });

        adrHour.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));
        adrHour.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        adrHour.setName(""); // NOI18N

        adrMin.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        jLabel1.setText("Hour / Minutes");

        adrCustomerName.setMaximumSize(null);
        adrCustomerName.setMinimumSize(null);
        adrCustomerName.setPreferredSize(null);
        adrCustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adrCustomerNameActionPerformed(evt);
            }
        });

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Customer Name");

        chkPickup.setFont(new java.awt.Font("Dialog", 0, 14));
        chkPickup.setText("Pick up by client");
        chkPickup.setOpaque(false);

        jPanel5.setBackground(new java.awt.Color(-1,true));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(-16777216,true)));
        jPanel5.setLayout(new java.awt.GridLayout(3, 6, 5, 5));

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("AREA");
        jPanel5.add(jLabel13);

        adrArea.setEditable(true);
        adrArea.setMaximumSize(null);
        adrArea.setMinimumSize(null);
        adrArea.setPreferredSize(null);
        adrArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adrAreaActionPerformed(evt);
            }
        });
        jPanel5.add(adrArea);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Phone/ID");
        jPanel5.add(jLabel2);

        adrPhone.setMaximumSize(null);
        adrPhone.setMinimumSize(null);
        adrPhone.setPreferredSize(null);
        adrPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adrPhoneActionPerformed(evt);
            }
        });
        adrPhone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                adrPhoneFocusLost(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/forms/panels/images/find.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(adrPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adrPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel5.add(jPanel1);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Block");
        jPanel5.add(jLabel19);

        adrBlock.setMaximumSize(null);
        adrBlock.setMinimumSize(null);
        adrBlock.setPreferredSize(null);
        jPanel5.add(adrBlock);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Other Tel");
        jPanel5.add(jLabel15);

        adrOtherTel.setMaximumSize(null);
        adrOtherTel.setMinimumSize(null);
        adrOtherTel.setPreferredSize(null);
        adrOtherTel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adrOtherTelActionPerformed(evt);
            }
        });
        jPanel5.add(adrOtherTel);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("Street");
        jPanel5.add(jLabel20);

        adrStreet.setMaximumSize(null);
        adrStreet.setMinimumSize(null);
        adrStreet.setPreferredSize(null);
        jPanel5.add(adrStreet);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Jedda");
        jPanel5.add(jLabel21);

        adrJedda.setMaximumSize(null);
        adrJedda.setMinimumSize(null);
        adrJedda.setPreferredSize(null);
        jPanel5.add(adrJedda);

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel22.setText("Building");
        jPanel5.add(jLabel22);

        adrBldg.setMaximumSize(null);
        adrBldg.setMinimumSize(null);
        adrBldg.setPreferredSize(null);
        jPanel5.add(adrBldg);

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel23.setText("Floor No");
        jPanel5.add(jLabel23);

        adrFloorNo.setMaximumSize(null);
        adrFloorNo.setMinimumSize(null);
        adrFloorNo.setPreferredSize(null);
        adrFloorNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adrFloorNoActionPerformed(evt);
            }
        });
        jPanel5.add(adrFloorNo);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Flat No/Unit No");
        jPanel5.add(jLabel16);

        adrWorkAddress.setMaximumSize(null);
        adrWorkAddress.setMinimumSize(null);
        adrWorkAddress.setPreferredSize(null);
        jPanel5.add(adrWorkAddress);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Order Notes");

        adrNotes.setColumns(20);
        adrNotes.setRows(5);
        jScrollPane1.setViewportView(adrNotes);

        jLabel4.setText("Email ");

        javax.swing.GroupLayout pnlBasicLayout = new javax.swing.GroupLayout(pnlBasic);
        pnlBasic.setLayout(pnlBasicLayout);
        pnlBasicLayout.setHorizontalGroup(
            pnlBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBasicLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBasicLayout.createSequentialGroup()
                        .addGroup(pnlBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBasicLayout.createSequentialGroup()
                                .addComponent(adrDeliveryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(adrHour, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(adrMin, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                                .addComponent(chkPickup, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(adrCustomerName, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)))
                    .addGroup(pnlBasicLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(pnlBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlBasicLayout.createSequentialGroup()
                                .addComponent(adrEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 348, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)))
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 708, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlBasicLayout.setVerticalGroup(
            pnlBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBasicLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(adrDeliveryDate, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addComponent(adrHour, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addComponent(adrMin, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addComponent(chkPickup)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adrCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBasicLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(adrEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        jTabbedPane1.addTab("Basic", new javax.swing.ImageIcon(getClass().getResource("/com/forms/panels/images/board.png")), pnlBasic, ""); // NOI18N

        pnlRecipt.setBackground(new java.awt.Color(-1,true));

        jPanel6.setBackground(new java.awt.Color(-1,true));
        jPanel6.setBorder(new javax.swing.border.SoftBevelBorder(0));
        jPanel6.setLayout(new java.awt.GridLayout(3, 6, 5, 5));

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("AREA");
        jPanel6.add(jLabel18);

        adrRArea.setEditable(true);
        adrRArea.setMaximumSize(null);
        adrRArea.setMinimumSize(null);
        adrRArea.setPreferredSize(null);
        adrRArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adrRAreaActionPerformed(evt);
            }
        });
        jPanel6.add(adrRArea);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Phone");
        jPanel6.add(jLabel3);

        adrRPhone.setMaximumSize(null);
        adrRPhone.setMinimumSize(null);
        adrRPhone.setPreferredSize(null);
        adrRPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adrRPhoneActionPerformed(evt);
            }
        });
        adrRPhone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                adrRPhoneFocusLost(evt);
            }
        });
        jPanel6.add(adrRPhone);

        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel24.setText("Block");
        jPanel6.add(jLabel24);

        adrRBlock1.setMaximumSize(null);
        adrRBlock1.setMinimumSize(null);
        adrRBlock1.setPreferredSize(null);
        jPanel6.add(adrRBlock1);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel25.setText("Other Tel");
        jPanel6.add(jLabel25);

        adrROtherTel.setMaximumSize(null);
        adrROtherTel.setMinimumSize(null);
        adrROtherTel.setPreferredSize(null);
        adrROtherTel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adrROtherTelActionPerformed(evt);
            }
        });
        jPanel6.add(adrROtherTel);

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel26.setText("Street");
        jPanel6.add(jLabel26);

        adrRStreet.setMaximumSize(null);
        adrRStreet.setMinimumSize(null);
        adrRStreet.setPreferredSize(null);
        jPanel6.add(adrRStreet);

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel27.setText("Jedda");
        jPanel6.add(jLabel27);

        adrRJedda.setMaximumSize(null);
        adrRJedda.setMinimumSize(null);
        adrRJedda.setPreferredSize(null);
        jPanel6.add(adrRJedda);

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel28.setText("Building");
        jPanel6.add(jLabel28);

        adrRBldg.setMaximumSize(null);
        adrRBldg.setMinimumSize(null);
        adrRBldg.setPreferredSize(null);
        jPanel6.add(adrRBldg);

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel29.setText("Floor No");
        jPanel6.add(jLabel29);

        adrRFloorNo.setMaximumSize(null);
        adrRFloorNo.setMinimumSize(null);
        adrRFloorNo.setPreferredSize(null);
        adrRFloorNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adrRFloorNoActionPerformed(evt);
            }
        });
        jPanel6.add(adrRFloorNo);

        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel30.setText("Flat No/Unit No");
        jPanel6.add(jLabel30);

        adrRWorkAddress.setMaximumSize(null);
        adrRWorkAddress.setMinimumSize(null);
        adrRWorkAddress.setPreferredSize(null);
        jPanel6.add(adrRWorkAddress);

        chkRCopyClient.setBackground(new java.awt.Color(-20561,true));
        chkRCopyClient.setText("Copy Client Address");
        chkRCopyClient.setOpaque(false);
        chkRCopyClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRCopyClientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlReciptLayout = new javax.swing.GroupLayout(pnlRecipt);
        pnlRecipt.setLayout(pnlReciptLayout);
        pnlReciptLayout.setHorizontalGroup(
            pnlReciptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReciptLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlReciptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkRCopyClient, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        pnlReciptLayout.setVerticalGroup(
            pnlReciptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReciptLayout.createSequentialGroup()
                .addComponent(chkRCopyClient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(189, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Recipient", new javax.swing.ImageIcon(getClass().getResource("/com/forms/panels/images/finish_all.png")), pnlRecipt); // NOI18N

        pnlAdvPayment.setBackground(new java.awt.Color(-1,true));

        pnlMultiplePay.setBackground(new java.awt.Color(-1,true));

        sumTxtPaidAmt.setEditable(false);
        sumTxtPaidAmt.setFont(new java.awt.Font("Tahoma", 1, 18));
        sumTxtPaidAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sumTxtPaidAmt.setText("0");
        sumTxtPaidAmt.setName("sumTxtCashAmt"); // NOI18N
        sumTxtPaidAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumTxtPaidAmtActionPerformed(evt);
            }
        });
        sumTxtPaidAmt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sumTxtPaidAmtsumTxtDiscAmtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sumTxtPaidAmtsumTxtDiscAmtFocusLost(evt);
            }
        });

        jScrollPane4.setBackground(new java.awt.Color(-20561,true));

        payTable.setFont(new java.awt.Font("Times New Roman", 1, 24));
        payTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        payTable.setRowHeight(30);
        payTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paytablemouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(payTable);

        msg.setFont(new java.awt.Font("Dialog", 0, 14));
        msg.setForeground(new java.awt.Color(-16776961,true));
        msg.setText("msg");

        javax.swing.GroupLayout pnlMultiplePayLayout = new javax.swing.GroupLayout(pnlMultiplePay);
        pnlMultiplePay.setLayout(pnlMultiplePayLayout);
        pnlMultiplePayLayout.setHorizontalGroup(
            pnlMultiplePayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMultiplePayLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMultiplePayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sumTxtPaidAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(msg, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );
        pnlMultiplePayLayout.setVerticalGroup(
            pnlMultiplePayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMultiplePayLayout.createSequentialGroup()
                .addGroup(pnlMultiplePayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMultiplePayLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sumTxtPaidAmt, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE))
                    .addComponent(msg, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlAdvPaymentLayout = new javax.swing.GroupLayout(pnlAdvPayment);
        pnlAdvPayment.setLayout(pnlAdvPaymentLayout);
        pnlAdvPaymentLayout.setHorizontalGroup(
            pnlAdvPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMultiplePay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlAdvPaymentLayout.setVerticalGroup(
            pnlAdvPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdvPaymentLayout.createSequentialGroup()
                .addComponent(pnlMultiplePay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Advance Payments", new javax.swing.ImageIcon(getClass().getResource("/com/forms/panels/images/start_all.png")), pnlAdvPayment); // NOI18N

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/forms/panels/images/ok.png"))); // NOI18N
        jButton1.setText("OK");
        jButton1.setOpaque(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/forms/panels/images/cancel.png"))); // NOI18N
        jButton2.setText("Cancel");
        jButton2.setOpaque(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/forms/panels/images/details.png"))); // NOI18N
        jButton4.setText("Previous Orders");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlKbLayout = new javax.swing.GroupLayout(pnlKb);
        pnlKb.setLayout(pnlKbLayout);
        pnlKbLayout.setHorizontalGroup(
            pnlKbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 723, Short.MAX_VALUE)
        );
        pnlKbLayout.setVerticalGroup(
            pnlKbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 175, Short.MAX_VALUE)
        );

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/forms/panels/images/keyboard.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addGap(287, 287, 287)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)
                    .addComponent(pnlKb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlKb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            if (sumPaidAmt > 0 && !is_delivery_payment_posted(parentJf, parentJf.getSp().dataInv_date, -1)) {
                throw new Exception("Can not enter advance  amount  in closed date !");
            }

            do_ok();
        } catch (Exception ex) {
            Logger.getLogger(frmDelivery.class.getName()).log(Level.SEVERE, null, ex);
            try {
                dbConnection.rollback();
            } catch (SQLException ex1) {
            }
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    public void do_ok() throws Exception {

        if (adrDeliveryDate.getText() == null || adrDeliveryDate.getText().isEmpty()) {
            throw new SQLException("Must specifiy delivery date !");
        }
        if (adrPhone.getText() == null || adrPhone.getText().isEmpty()) {
            throw new SQLException("Must specifiy phone !");
        }
        if (adrCustomerName.getText() == null || adrCustomerName.getText().length() == 0) {
            throw new Exception("Must enter name of customer ");
        }

        Date dt = dateformat.parse(adrDeliveryDate.getText());
        Timestamp dt2 = new Timestamp(dateformat2.parse(adrDeliveryDate.getText() + " " + adrHour.getModel().getValue() + ":" + adrMin.getModel().getValue()).getTime());
        Date tdt = new Date(System.currentTimeMillis());

        if (keyfld <= -1) {
            if (dt2.compareTo(tdt) < 0) {
                throw new Exception("Date must select greater than today date & Time !   # " + tdt.toString());
            }
            PreparedStatement psk = dbConnection.prepareStatement("select nvl(max(keyfld),0)+1 keyfld ,nvl(max(b_no),0)+1 b_no from pos_onpur1",
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rsk = psk.executeQuery();
            if (rsk != null && rsk.first()) {
                keyfld = rsk.getDouble("keyfld");
                dataBkInvoiceNo = rsk.getDouble("b_no");
                rsk.close();
            }
        } else {
            dataBkInvoiceNo = Double.valueOf(utils.getSqlValue("select b_no from pos_onpur1 where keyfld='" + keyfld + "'", dbConnection));
        }
        QueryExe qe = new QueryExe(" begin "
                + "delete from pos_onpur1 where keyfld= :KEYFLD ; "
                + ""
                + " insert into pos_onpur1(KEYFLD, LOCATION_CODE, B_KIND, B_NO, B_DATE, B_DATETIME,"
                + " DELIVERY_DATETIME, CUST_REFERENCE, TABLE_CODE,"
                + " FLAG, CLOSING_TIME, INV_AMT, DISC_AMT, SLSMN, CUST_COUNTS,"
                + " AREA, TEL, HOME_ADDRESS, WORK_ADDRESS, EMAIL, BDETAIL, "
                + " BCUST, TERMOFPAY, REMARK, REFERENCE, SPEC_COMMENTS, COMPLAINS, "
                + " LAST_DRIVER, ADDR_AREA, ADDR_BLOCK, ADDR_JEDDA, ADDR_STREET, ADDR_BLDG, ADDR_TEL , ADDR_FLOOR ,"
                + " ADDR_R_AREA, ADDR_R_BLOCK, ADDR_R_JEDDA, ADDR_R_STREET, ADDR_R_BLDG, ADDR_R_TEL , "
                + " ADDR_R_FLOOR, CUST_NAME, PICK_UP,RECIPIENT_ADDRESS "
                + ") VALUES "
                + "(:KEYFLD, :LOCATION_CODE, :B_KIND, :B_NO, :B_DATE, :B_DATETIME,"
                + ":DELIVERY_DATETIME, :CUST_REFERENCE, :TABLE_CODE,"
                + " :FLAG, :CLOSING_TIME, (SELECT NVL(SUM((PRICE/PACK)*ALLQTY),0) FROM POS_ONPUR2 WHERE KEYFLD= :KEYFLD ) , "
                + " :DISC_AMT, :SLSMN, :CUST_COUNTS,"
                + " :AREA, :TEL, :HOME_ADDRESS, :WORK_ADDRESS, :EMAIL, :BDETAIL,"
                + " :BCUST, :TERMOFPAY, :REMARK, :REFERENCE, :SPEC_COMMENTS, :COMPLAINS,"
                + " :LAST_DRIVER, :ADDR_AREA, :ADDR_BLOCK, :ADDR_JEDDA, :ADDR_STREET, :ADDR_BLDG, :ADDR_TEL, :ADDR_FLOOR,"
                + " :ADDR_R_AREA, :ADDR_R_BLOCK, :ADDR_R_JEDDA, :ADDR_R_STREET, :ADDR_R_BLDG, :ADDR_R_TEL, :ADDR_R_FLOOR , :CUST_NAME, :PICK_UP ,:RECIPIENT_ADDRESS "
                + "); "
                + " DELETE FROM POSCUSTOMER WHERE CODE= :CUST_REFERENCE ; "
                + " INSERT INTO POSCUSTOMER ("
                + " CODE, NAME, NAMEA,"
                + " AREA, TEL, HOME_ADDRESS,"
                + " WORK_ADDRESS, FLAG, EMAIL,"
                + " SPEC_COMMENTS,"
                + " COMPLAINS, LAST_DRIVER,addr_jedda,addr_block,addr_street,addr_bldg,  reference"
                + "   ) values ( "
                + " :CUST_REFERENCE, :CUST_NAME, '',"
                + " :AREA, :TEL, :HOME_ADDRESS,"
                + " :WORK_ADDRESS, 1, :EMAIL,"
                + " :SPEC_COMMENTS,"
                + " :COMPLAINS, :LAST_DRIVER, :addr_jedda, :addr_block, :addr_street, :addr_bldg,  :reference"
                + "  );"
                + "end;", dbConnection);

        qe.setParaValue("KEYFLD", keyfld);
        qe.setParaValue("LOCATION_CODE", parentJf.getSp().dataLocationCode);
        qe.setParaValue("B_KIND", "DELIVERY");
        qe.setParaValue("B_NO", dataBkInvoiceNo);
        qe.setParaValue("B_DATE", dt);
        qe.setParaValue("B_DATETIME", dt);
        qe.setParaValue("DELIVERY_DATETIME", dt2);
        qe.setParaValue("CUST_REFERENCE", adrPhone.getText());
        qe.setParaValue("TABLE_CODE", "");
        qe.setParaValue("FLAG", 1);
        qe.setParaValue("CLOSING_TIME", null);
        //qe.setParaValue("INV_AMT", parentJf.getSp().sumGrossAmt);
        qe.setParaValue("DISC_AMT", 0);
        qe.setParaValue("SLSMN", ((parentJf.getSp().dataDlvSales < 0
                ? parentJf.getSp().txtCashier.getSelectedItem() : parentJf.getSp().dataDlvSales)));
        qe.setParaValue("CUST_COUNTS", 1);
        qe.setParaValue("AREA", adrArea.getSelectedItem());
        qe.setParaValue("TEL", adrPhone.getText());
        qe.setParaValue("HOME_ADDRESS", "");
        qe.setParaValue("WORK_ADDRESS", adrWorkAddress);
        qe.setParaValue("EMAIL", adrEmail);
        qe.setParaValue("BDETAIL", "");
        qe.setParaValue("BCUST", "");
        qe.setParaValue("TERMOFPAY", "");
        qe.setParaValue("REMARK", "");
        qe.setParaValue("REFERENCE", "");
        qe.setParaValue("SPEC_COMMENTS", adrNotes.getText());
        qe.setParaValue("COMPLAINS", "");
        qe.setParaValue("LAST_DRIVER", "");
        qe.setParaValue("ADDR_AREA", adrArea.getSelectedItem());
        qe.setParaValue("ADDR_BLOCK", adrBlock);
        qe.setParaValue("ADDR_JEDDA", adrJedda);
        qe.setParaValue("ADDR_STREET", adrStreet);
        qe.setParaValue("ADDR_BLDG", adrBldg);
        qe.setParaValue("ADDR_TEL", adrOtherTel);
        qe.setParaValue("ADDR_FLOOR", adrFloorNo);
        qe.setParaValue("CUST_NAME", adrCustomerName);
        qe.setParaValue("PICK_UP", chkPickup.isSelected());
        qe.setParaValue("ADDR_R_AREA", adrRArea.getSelectedItem());
        qe.setParaValue("ADDR_R_BLOCK", adrRBlock1);
        qe.setParaValue("ADDR_R_JEDDA", adrRJedda);
        qe.setParaValue("ADDR_R_STREET", adrRStreet);
        qe.setParaValue("ADDR_R_BLDG", adrRBldg);
        qe.setParaValue("ADDR_R_TEL", adrROtherTel);
        qe.setParaValue("ADDR_R_FLOOR", adrRFloorNo);
        qe.setParaValue("RECIPIENT_ADDRESS", chkRCopyClient.isSelected());

        qe.execute();
        qe.close();
        /*
        parentJf.getSp().adrArea.setSelectedItem(((String) adrArea.getSelectedItem()));
        parentJf.getSp().adrBldg.setText(parentJf.getSp().adrBldg.getText());
        parentJf.getSp().adrBlock.setText(parentJf.getSp().adrBlock.getText());
        parentJf.getSp().adrCustomerName.setText(parentJf.getSp().adrCustomerName.getText());
        parentJf.getSp().adrDeliveryDate.setText(parentJf.getSp().adrDeliveryDate.getText());
        parentJf.getSp().adrHour.setText(adrHour.getModel().getValue().toString());
        parentJf.getSp().adrMin.setText(adrMin.getModel().getValue().toString());
        parentJf.getSp().adrFloorNo.setText(adrFloorNo.getText());
        parentJf.getSp().adrJedda.setText(adrJedda.getText());
        parentJf.getSp().adrOtherTel.setText(adrOtherTel.getText());
        parentJf.getSp().adrPhone.setText(adrPhone.getText());
        parentJf.getSp().adrStreet.setText(adrStreet.getText());
        parentJf.getSp().adrWorkAddress.setText(adrWorkAddress.getText());
        
         */
        save_advance_payment();
        dbConnection.commit();
        parentJf.getSp().onChangeCashier(false);
        setVisible(false);

    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void adrFloorNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adrFloorNoActionPerformed
}//GEN-LAST:event_adrFloorNoActionPerformed

    private void adrOtherTelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adrOtherTelActionPerformed
}//GEN-LAST:event_adrOtherTelActionPerformed

    private void adrPhoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_adrPhoneFocusLost
        if (adrPhone.getText() == null || adrPhone.getText().length() == 0) {
            return;
        }
        int d = Integer.valueOf(parentJf.getMapVars().get("PHONE_MAX_DIGITS"));
        if (adrPhone.getText() != null && !adrPhone.getText().isEmpty() && adrPhone.getText().length() != d) {
            JOptionPane.showMessageDialog(this, "Must have typed " + d + " characters !");
            adrPhone.requestFocus();
        }
        PreparedStatement ps2 = null;
        try {
            ps2 = dbConnection.prepareStatement("select *from POSCUSTOMER where CODE=?", ResultSet.TYPE_SCROLL_INSENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);
            ps2.setString(1, adrPhone.getText());
            ResultSet rs2 = ps2.executeQuery();
            if (rs2.first()) {
                adrCustomerName.setText(rs2.getString("NAME"));
                adrArea.setSelectedItem(rs2.getString("AREA"));
                adrBldg.setText(rs2.getString("ADDR_BLDG"));
                adrFloorNo.setText(rs2.getString("REFERENCE"));
                adrJedda.setText(rs2.getString("ADDR_JEDDA"));
                adrOtherTel.setText(rs2.getString("TEL"));
                adrStreet.setText(rs2.getString("ADDR_STREET"));
                adrWorkAddress.setText(rs2.getString("WORK_ADDRESS"));
                adrBlock.setText(rs2.getString("addr_block"));
                adrNotes.setText(rs2.getString("SPEC_COMMENTS"));
            }
            ps2.close();
        } catch (SQLException ex) {
            try {
                Logger.getLogger(salesPanel.class.getName()).log(Level.SEVERE, null, ex);
                if (ps2 != null && ps2.isClosed() == false) {
                    ps2.close();
                }
            } catch (SQLException ex1) {
                Logger.getLogger(salesPanel.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
}//GEN-LAST:event_adrPhoneFocusLost

    private void adrPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adrPhoneActionPerformed
        adrPhoneFocusLost(null);
}//GEN-LAST:event_adrPhoneActionPerformed

    private void adrAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adrAreaActionPerformed
}//GEN-LAST:event_adrAreaActionPerformed

    private void focusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_focusGained
        kv.getAlphasPanel().removeAll();
        kv.showCalendar(kv.getAlphasPanel());
        Date dt = (new Date());
        dt.setTime(System.currentTimeMillis());
        kv.jd.setMinSelectableDate(dt);
        kv.getParentPanel().updateUI();
}//GEN-LAST:event_focusGained

    private void adrDeliveryDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adrDeliveryDateActionPerformed
}//GEN-LAST:event_adrDeliveryDateActionPerformed

    private void adrCustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adrCustomerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adrCustomerNameActionPerformed

    private void windowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowOpened
        adrDeliveryDate.requestFocus();
        kv.setCurrentMode(keyboardViewer.MODE_CALENDAR);
    }//GEN-LAST:event_windowOpened

    private void adrRAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adrRAreaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adrRAreaActionPerformed

    private void adrRPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adrRPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adrRPhoneActionPerformed

    private void adrRPhoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_adrRPhoneFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_adrRPhoneFocusLost

    private void adrROtherTelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adrROtherTelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adrROtherTelActionPerformed

    private void adrRFloorNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adrRFloorNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adrRFloorNoActionPerformed

    private void chkRCopyClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRCopyClientActionPerformed
        copy_rec_addr();
    }//GEN-LAST:event_chkRCopyClientActionPerformed

    private void sumTxtPaidAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumTxtPaidAmtActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_sumTxtPaidAmtActionPerformed

    private void sumTxtPaidAmtsumTxtDiscAmtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sumTxtPaidAmtsumTxtDiscAmtFocusGained
}//GEN-LAST:event_sumTxtPaidAmtsumTxtDiscAmtFocusGained

    private void sumTxtPaidAmtsumTxtDiscAmtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sumTxtPaidAmtsumTxtDiscAmtFocusLost
        // TODO add your handling code here:
}//GEN-LAST:event_sumTxtPaidAmtsumTxtDiscAmtFocusLost

    private void paytablemouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paytablemouseClicked
        payTable.editCellAt(payTable.getSelectedRow(), 2);
        if (payTable.getEditorComponent() != null && payTable.getEditorComponent() instanceof JFormattedTextField) {
            ((JFormattedTextField) payTable.getEditorComponent()).selectAll();
        }
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                ((JFormattedTextField) payTable.getEditorComponent()).selectAll();
            }
        });
    }//GEN-LAST:event_paytablemouseClicked

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        JTabbedPane st = (JTabbedPane) evt.getSource();
        if (st.getSelectedComponent() == pnlRecipt) {
            copy_rec_addr();
        }


    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        show_customers();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void show_customers() {
        try {
            lovDialog ld=lovDialog.getInstance(this,"select code,name from poscustomer order by name  ", true,false);
            if (ld.getSelectedNo() >= 0) {
                adrPhone.setText(ld.getSlov().getLctb().getFieldValue(ld.getSelectedNo(), "CODE") + "");
                adrPhoneActionPerformed(null);
            }

        } catch (SQLException ex) {
            Logger.getLogger(frmDelivery.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            lovDialog ld = lovDialog.getInstance(this, "select p2.refer,i.descr,p2.invoice_no,"
                    + " to_char(p2.dat,'dd/mm/rrrr') Inv_Date,p2.price,p2.allqty/p2.pack Quantity "
                    + " from pospur1 p1,pospur2 p2,items i where p2.keyfld=p1.keyfld "
                    + " and i.reference=p2.refer and p1.inv_ref='" + adrPhone.getText()
                    + "' order by p2.dat desc", 650, 400,true,true);
        } catch (SQLException ex) {
            Logger.getLogger(frmDelivery.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    toggleKb();
}//GEN-LAST:event_jButton5ActionPerformed
    private void toggleKb() {
        if (pnlKb.isVisible()) {
            setSize(getWidth(), getHeight()-200);
            pnlKb.setVisible(false);
        } else {
            setSize(getWidth(), getHeight()+200);
            pnlKb.setVisible(true);
            pnlKb.setSize(getWidth(), 175);
            kv.setParentPanel(pnlKb);
            kv.createView();
            kv.setShowPanels(keyboardViewer.MODE_NUMBERS);
            kv.getParentPanel().updateUI();;

            pnlKb.updateUI();

        }
    }
    public void copy_rec_addr() {
        adrRArea.getModel().setSelectedItem(null);
        adrRBldg.setText("");
        adrRBlock1.setText("");
        adrRFloorNo.setText("");
        adrRJedda.setText("");
        adrROtherTel.setText("");
        adrRPhone.setText("");
        adrRStreet.setText("");
        adrRWorkAddress.setText("");


        adrRArea.setEditable(true);
        adrRBldg.setEditable(true);
        adrRBlock1.setEditable(true);
        adrRFloorNo.setEditable(true);
        adrRJedda.setEditable(true);
        adrROtherTel.setEditable(true);
        adrRPhone.setEditable(true);
        adrWorkAddress.setEditable(true);
        adrRStreet.setEditable(false);

        if (chkRCopyClient.isSelected()) {
            adrRArea.setSelectedIndex(adrArea.getSelectedIndex());
            adrRBldg.setText(adrBldg.getText());
            adrRBlock1.setText(adrBlock.getText());
            adrRFloorNo.setText(adrFloorNo.getText());
            adrRJedda.setText(adrJedda.getText());
            adrROtherTel.setText(adrOtherTel.getText());
            adrRPhone.setText(adrPhone.getText());
            adrRStreet.setText(adrStreet.getText());
            adrRWorkAddress.setText(adrWorkAddress.getText());

            adrRArea.setEditable(false);
            adrRBldg.setEditable(false);
            adrRBlock1.setEditable(false);
            adrRFloorNo.setEditable(false);
            adrRJedda.setEditable(false);
            adrROtherTel.setEditable(false);
            adrRPhone.setEditable(false);
            adrWorkAddress.setEditable(false);
            adrRStreet.setEditable(false);

        }
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox adrArea;
    private javax.swing.JTextField adrBldg;
    private javax.swing.JTextField adrBlock;
    private javax.swing.JTextField adrCustomerName;
    private javax.swing.JTextField adrDeliveryDate;
    private javax.swing.JTextField adrEmail;
    private javax.swing.JTextField adrFloorNo;
    private javax.swing.JSpinner adrHour;
    private javax.swing.JTextField adrJedda;
    private javax.swing.JSpinner adrMin;
    private javax.swing.JTextArea adrNotes;
    private javax.swing.JTextField adrOtherTel;
    private javax.swing.JTextField adrPhone;
    private javax.swing.JComboBox adrRArea;
    private javax.swing.JTextField adrRBldg;
    private javax.swing.JTextField adrRBlock1;
    private javax.swing.JTextField adrRFloorNo;
    private javax.swing.JTextField adrRJedda;
    private javax.swing.JTextField adrROtherTel;
    private javax.swing.JTextField adrRPhone;
    private javax.swing.JTextField adrRStreet;
    private javax.swing.JTextField adrRWorkAddress;
    private javax.swing.JTextField adrStreet;
    private javax.swing.JTextField adrWorkAddress;
    private javax.swing.JCheckBox chkPickup;
    private javax.swing.JCheckBox chkRCopyClient;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel msg;
    private javax.swing.JTable payTable;
    private javax.swing.JPanel pnlAdvPayment;
    private javax.swing.JPanel pnlBasic;
    private javax.swing.JPanel pnlKb;
    private javax.swing.JPanel pnlMultiplePay;
    private javax.swing.JPanel pnlRecipt;
    private javax.swing.JTextField sumTxtPaidAmt;
    // End of variables declaration//GEN-END:variables
    private MainFrame parentJf = null;
    private Connection dbConnection = null;
    private keyboardViewer kv = null;
    private DecimalFormat decimalformat = null;
    private SimpleDateFormat dateformat = null;
    private SimpleDateFormat dateformat2 = null;
    private double dataBkInvoiceNo = -1;
    private KeyBoardFrame kf = new KeyBoardFrame();
    private InputVerifier number_iv = new InputVerifier() {

        @Override
        public boolean verify(JComponent input) {
            JTextField txt = (JTextField) input;
            if (txt.getText().length() == 0) {
                return true;
            }

            boolean ret = false;
            try {
                //decimalformat.parse(txt.getText());
                if (txt.getName().equals("sumTxtPaidAmt")) {
                    sumPaidAmt = ((Number) decimalformat.parse(txt.getText())).doubleValue();
                    //txt.setText(decimalformat.format(sumPaidAmt));
                }
                if (txt.getName().equals("sumTxtCashAmt")) {
                    sumCashAmt = ((Number) decimalformat.parse(txt.getText())).doubleValue();
                }

                update_sums();
                ret = true;
            } catch (ParseException ex) {
                Logger.getLogger(salesPanel.class.getName()).log(Level.SEVERE, null, ex);
                ret = false;
            }

            return ret;
        }
    };

    public void update_sums() {
        sumPaidAmt = payRows.getSummaryOf("AMOUNT", localTableModel.SUMMARY_SUM);
        sumTxtPaidAmt.setText(decimalformat.format(sumPaidAmt));
    }

    public void fetchPayments() {
        this.parentJf = parentJf;
        sumTxtPaidAmt.setInputVerifier(number_iv);
        sumNetAmt = parentJf.getSp().sumNetAmt;
        if (kv == null) {
            kv = new keyboardViewer(pnlKb);
            kv.setShowPanels(keyboardViewer.MODE_NUMBERS);

        }
        decimalformat = new DecimalFormat(parentJf.getMapVars().get("money_number"));
        dateformat = new SimpleDateFormat(parentJf.getMapVars().get("short_date_format"));
        sumCashAmt = 0;
        sumPaidAmt = 0;
        sumCashAmt = sumNetAmt;
        payRows.clearALl();
        payRows.getQrycols().add(new qryColumn(0, "NO"));
        payRows.getQrycols().add(new qryColumn(1, "DESCR"));
        payRows.getQrycols().add(new qryColumn(2, "AMOUNT"));
        payRows.getQrycols().add(new qryColumn(3, "ACCNO"));
        payRows.getQrycols().add(new qryColumn(4, "NAME"));
        payRows.getVisbleQrycols().addAll(payRows.getQrycols());

        payRows.getColByName("NO").setCanEdit(false);
        payRows.getColByName("DESCR").setCanEdit(false);
        payRows.getColByName("ACCNO").setCanEdit(false);
        payRows.getColByName("NAME").setCanEdit(false);

        payRows.getColByName("AMOUNT").setAlignmnet(JLabel.TRAILING);
        payRows.getColByName("AMOUNT").setNumberFormat(decimalformat.toPattern());
        payRows.getColByName("AMOUNT").setDatatype(19);
        payRows.getColByName("AMOUNT").setColor(Color.YELLOW);

        payRows.getColByName("ACCNO").setVisible(false);
        payRows.getColByName("NAME").setVisible(false);
        payRows.getVisbleQrycols().remove(payRows.getColByName("ACCNO"));
        payRows.getVisbleQrycols().remove(payRows.getColByName("NAME"));

        payTable.setModel(payRows);
        payTable.getColumnModel().getColumn(0).setCellRenderer(new ColorRenderer(true));
        payTable.getColumnModel().getColumn(1).setCellRenderer(new ColorRenderer(true));
        payTable.getColumnModel().getColumn(2).setCellRenderer(new ColorRenderer(true));
        ((ColorRenderer) payTable.getColumnModel().getColumn(2).getCellRenderer()).setFont(payTable.getFont());
        payTable.getColumnModel().getColumn(2).setCellEditor(new NumberEditor(decimalformat));
        payTable.getColumnModel().getColumn(2).getCellEditor().addCellEditorListener(new CellEditorListener() {

            public void editingStopped(ChangeEvent e) {
                sumPaidAmt = payRows.getSummaryOf("AMOUNT", localTableModel.SUMMARY_SUM);
                sumTxtPaidAmt.setText(decimalformat.format(sumPaidAmt));
                update_sums();
            }

            public void editingCanceled(ChangeEvent e) {
                sumPaidAmt = payRows.getSummaryOf("AMOUNT", localTableModel.SUMMARY_SUM);
                sumTxtPaidAmt.setText(decimalformat.format(sumPaidAmt));
                update_sums();
            }
        });
        payTable.getModel().addTableModelListener(new TableModelListener() {

            public void tableChanged(TableModelEvent e) {
            }
        });

        try {
            double dataKeyfld = Double.valueOf(utils.getSqlValue("select nvl(max(keyfld),-1.000123131313123999 ) "
                    + " from pospur1 where invoice_code=10 and orderno=" + keyfld, dbConnection));

            String sq = "select INVOICETYPE.*,C_YCUST.NAME ACNAME,nvl(p.amount,0) AMOUNT "
                    + " from invoicetype,C_YCUST ,pospayments p "
                    + " where C_YCUST.CODE(+)=INVOICETYPE.ACCNO AND location_code=?"
                    + " AND VOU_KEYFLD(+)=" + dataKeyfld + " and type_no(+)=invoicetype.no "
                    + " and invoicetype.accno is not null "
                    + " order by no ";
            PreparedStatement ps = parentJf.getSp().dbConnection.prepareStatement(sq, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ps.setString(1, parentJf.getSp().dataLocationCode);
            ResultSet rsx = ps.executeQuery();
            rsx.beforeFirst();
            while (rsx.next()) {
                Row rw = new Row(5);
                rw.lst.get(0).setValue(rsx.getString("NO"), Double.valueOf(rsx.getDouble("NO")));
                rw.lst.get(1).setValue(rsx.getString("DESCR"), rsx.getString("DESCR"));
                rw.lst.get(2).setValue(rsx.getDouble("AMOUNT"), rsx.getDouble("AMOUNT"));
                rw.lst.get(3).setValue(rsx.getString("ACCNO"), rsx.getString("ACCNO"));
                rw.lst.get(4).setValue(rsx.getString("ACNAME"), rsx.getString("ACNAME"));
                payRows.getRows().add(rw);
            }
            ps.close();
            update_sums();
            if (!is_delivery_payment_posted(parentJf, parentJf.getSp().dataDlvAdvanceDate, keyfld)) {
                msg.setVisible(true);
                msg.setText("Can not update advance due to closed on # "
                        + parentJf.getMapVars().get("POS_CLOSE_DATE_" + parentJf.getMapVars().get("DEFAULT_LOCATION")));
                payTable.setEnabled(false);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void setParentJf(MainFrame parent) {
        msg.setVisible(false);
        payTable.setEnabled(true);
        this.parentJf = parent;
        dbConnection = parentJf.getDbConneciton();
        if (kv == null) {
            kv = new keyboardViewer(pnlKb);
        }

        decimalformat = new DecimalFormat(parentJf.getMapVars().get("money_number"));
        dateformat = new SimpleDateFormat(parentJf.getMapVars().get("short_date_format"));
        dateformat2 = new SimpleDateFormat(parentJf.getMapVars().get("short_date_format") + " H:m");
        kv.createView();
        kv.kb_listner = new KeyBoardSelectionListner() {

            public void OnKeyPress(String str, String mode, Object data, boolean isKeyCommand) {
                JTextComponent tb = null;
                if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() != null
                        && KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() instanceof JTextComponent) {
                    tb = (JTextComponent) KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
                }
                if (isKeyCommand && mode.equals(keyboardViewer.MODE_CALENDAR)
                        && (tb == null || !(tb instanceof JTextField))) {
                    adrDeliveryDate.requestFocus();
                    adrDeliveryDate.setText(str);
                }
            }
        };
        chkRCopyClient.setSelected(true);
        if (keyfld > -1) {
            adrArea.setSelectedItem(((String) parentJf.getSp().adrArea.getSelectedItem()));
            adrBldg.setText(parentJf.getSp().adrBldg.getText());
            adrBlock.setText(parentJf.getSp().adrBlock.getText());
            adrCustomerName.setText(parentJf.getSp().adrCustomerName.getText());
            adrDeliveryDate.setText(parentJf.getSp().adrDeliveryDate.getText());
            adrHour.getModel().setValue(0);
            adrMin.getModel().setValue(0);
            if (!(parentJf.getSp().adrHour.getText().isEmpty())) {
                adrHour.getModel().setValue(Integer.valueOf(parentJf.getSp().adrHour.getText()));
            }
            if (!(parentJf.getSp().adrMin.getText().isEmpty())) {
                adrMin.getModel().setValue(Integer.valueOf(parentJf.getSp().adrMin.getText()));
            }
            adrFloorNo.setText(parentJf.getSp().adrFloorNo.getText());
            adrJedda.setText(parentJf.getSp().adrJedda.getText());
            adrOtherTel.setText(parentJf.getSp().adrOtherTel.getText());
            adrPhone.setText(parentJf.getSp().adrPhone.getText());
            adrStreet.setText(parentJf.getSp().adrStreet.getText());
            adrWorkAddress.setText(parentJf.getSp().adrWorkAddress.getText());
            adrNotes.setText(parentJf.getSp().adrNotes.getText());
            adrEmail.setText(parentJf.getSp().adrEmail.getText());
            chkPickup.setSelected(parentJf.getSp().chkPickup.isSelected());
            chkRCopyClient.setSelected(parentJf.getSp().chkRCopyClient.isSelected());
            if (!chkRCopyClient.isSelected()) {
                adrRArea.setSelectedItem(parentJf.getSp().adrRArea.getSelectedItem());
                adrRBldg.setText(parentJf.getSp().adrRBldg.getText());
                adrRBlock1.setText(parentJf.getSp().adrRBlock1.getText());
                adrRFloorNo.setText(parentJf.getSp().adrRFloorNo.getText());
                adrRJedda.setText(parentJf.getSp().adrRJedda.getText());
                adrROtherTel.setText(parentJf.getSp().adrROtherTel.getText());
                adrRPhone.setText(parentJf.getSp().adrRPhone.getText());
                adrRWorkAddress.setText(parentJf.getSp().adrRWorkAddress.getText());
                adrRStreet.setText(parentJf.getSp().adrRStreet.getText());
            } else {
                chkRCopyClientActionPerformed(null);
            }

        }

        fetchPayments();
        toggleKb();
    }

    public void save_advance_payment() throws Exception {

        double dataKeyfld = -1;
        double dataInvoiceNo = -1;
        try {
            PreparedStatement ps_up = null;
            if (keyfld < 0) {
                dataKeyfld = Double.valueOf(utils.getSqlValue("select nvl(max(KEYFLD),0)+1 from pospur1 " + " ", dbConnection));
            } else {
                dataKeyfld = Double.valueOf(utils.getSqlValue("select nvl(max(keyfld),-1 ) "
                        + "from pospur1 where invoice_code=10 and orderno=" + keyfld, dbConnection));
                dataInvoiceNo = Double.valueOf(utils.getSqlValue("select nvl(max(invoice_no),-1 ) "
                        + "from pospur1 where invoice_code=10 and orderno=" + keyfld + " and location_code='" + parentJf.getSp().dataLocationCode + "'", dbConnection));
                if (dataKeyfld < 0) {
                    dataKeyfld = Double.valueOf(utils.getSqlValue("select nvl(max(KEYFLD),0)+1 from pospur1 " + " ", dbConnection));
                    dataInvoiceNo = Double.valueOf(utils.getSqlValue("select nvl(max(invoice_no),0 )+1 "
                            + "from pospur1 where invoice_code=10 and  " + " location_code='" + parentJf.getSp().dataLocationCode + "'", dbConnection));

                }
            }
            ps_up = dbConnection.prepareStatement("BEGIN "
                    + "delete from pospur1 where invoice_code=10 and KEYFLD=" + dataKeyfld + ";"
                    + "delete from pospayments where vou_keyfld=" + dataKeyfld + ";"
                    + "update pos_onpur1 set advance_date=SYSDATE,advance_paid=0 where keyfld='"+keyfld+"' ; end; ");
            ps_up.executeUpdate();
            ps_up.close();

            if (sumPaidAmt <= 0) {
                return;
            }

            String sql =
                    " begin insert into pospur1("
                    + "PERIODCODE, LOCATION_CODE, INVOICE_NO, "
                    + "INVOICE_CODE, TYPE, INVOICE_DATE,"
                    + "STRA, USERNAME, INV_AMT, "
                    + "DISC_AMT, CREATDT, KEYFLD,YEAR,SLSMN, "
                    + "INV_REF,INV_REFNM,ADDR_AREA,"
                    + "ADDR_TEL ,HOME_ADDRESS,WORK_ADDRESS,SPEC_COMMENTS,"
                    + "COMPLAINS,addr_jedda,addr_block,addr_street,"
                    + "addr_bldg,reference_information,paidamt2,totqty,add_charge,MEMO,CTG,ORDERNO"
                    + ")values ( "
                    + ":PERIODCODE, :LOCATION_CODE, :INVOICE_NO, "
                    + ":INVOICE_CODE, :TYPE, :INVOICE_DATE,"
                    + ":STRA, :USERNAME, :INV_AMT, "
                    + ":DISC_AMT, sysdate, :KEYFLD,'2003',:SLSMN, "
                    + ":INV_REF,:INV_REFNM,:ADDR_AREA,"
                    + ":ADDR_TEL ,:HOME_ADDRESS,:WORK_ADDRESS,:SPEC_COMMENTS,"
                    + ":COMPLAINS,:addr_jedda,:addr_block,:addr_street,"
                    + ":addr_bldg,:reference_information,:paidamt2,:totqty,:add_charge,:MEMO,:CTG,:ORDERNO"
                    + "); update pos_onpur1 "
                    + "set ADVANCE_KEYFLD= :KEYFLD , advance_paid= :INV_AMT , ADVANCE_DATE = :INVOICE_DATE where  KEYFLD= :ORDERNO ;"
                    + "end;";
            QueryExe qe = new QueryExe(sql, dbConnection);
            qe.setParaValue("PERIODCODE", parentJf.getMapVars().get("CURRENT_PERIOD"));
            qe.setParaValue("LOCATION_CODE", parentJf.getSp().dataLocationCode);
            qe.setParaValue("INVOICE_NO", dataInvoiceNo);
            qe.setParaValue("INVOICE_CODE", 10);
            qe.setParaValue("TYPE", 1);
            qe.setParaValue("INVOICE_DATE", new java.sql.Date(parentJf.getSp().dataInv_date.getTime()));
            qe.setParaValue("STRA", parentJf.getSp().dataStore);
            qe.setParaValue("USERNAME", parentJf.getLp().getLogon_user());
            qe.setParaValue("INV_AMT", sumPaidAmt);
            qe.setParaValue("DISC_AMT", 0);
            qe.setParaValue("KEYFLD", dataKeyfld);
            qe.setParaValue("SLSMN", parentJf.getSp().txtCashier.getSelectedItem());
            qe.setParaValue("INV_REF", adrPhone.getText());
            qe.setParaValue("INV_REFNM", adrCustomerName.getText());
            qe.setParaValue("ADDR_AREA", ((String) adrArea.getSelectedItem()));
            qe.setParaValue("ADDR_TEL", adrOtherTel.getText());
            qe.setParaValue("HOME_ADDRESS", "");
            qe.setParaValue("WORK_ADDRESS", adrWorkAddress.getText());
            qe.setParaValue("SPEC_COMMENTS", "");
            qe.setParaValue("COMPLAINS", "");
            qe.setParaValue("ADDR_JEDDA", adrJedda.getText());
            qe.setParaValue("ADDR_BLOCK", adrBlock.getText());
            qe.setParaValue("ADDR_STREET", adrStreet.getText());
            qe.setParaValue("ADDR_BLDG", adrBldg.getText());
            qe.setParaValue("REFERENCE_INFORMATION", adrFloorNo.getText());
            qe.setParaValue("PAIDAMT2", sumPaidAmt);
            qe.setParaValue("TOTQTY", 0);
            qe.setParaValue("ADD_CHARGE", 0);
            qe.setParaValue("MEMO", "Advance payment ");
            qe.setParaValue("CTG", "");
            qe.setParaValue("ORDERNO", keyfld);

            qe.execute();
            qe.close();
            qe = new QueryExe(
                    "BEGIN insert into POSPAYMENTS(VOU_KEYFLD, TYPE_NO,"
                    + " AMOUNT, ACCNO, ACCNAME) values (:VOU_KEYFLD, :TYPE_NO,"
                    + " :AMOUNT, :ACCNO, :ACCNAME );"
                    + " end;", dbConnection);
            payTable.removeEditor();
            qe.parse();
            for (int i = 0; i < payRows.getRows().size(); i++) {
                Row row = payRows.getRows().get(i);
                Double f = Double.valueOf(row.lst.get(2).getValue().toString());
                if (f > 0) {
                    if (row.lst.get(3).getValue() == null
                            || row.lst.get(4).getValue() == null) {
                        throw new Exception("Call Administrator for account  payment for KWD : "
                                + row.lst.get(2).getValue().toString() + " for " + row.lst.get(1).getValue());
                    }
                    qe.setParaValue("VOU_KEYFLD", dataKeyfld);
                    qe.setParaValue("TYPE_NO", ((Double) row.lst.get(0).getValue()));
                    qe.setParaValue("AMOUNT", ((Double) row.lst.get(2).getValue()));
                    qe.setParaValue("ACCNO", row.lst.get(3).getValue().toString());
                    qe.setParaValue("ACCNAME", row.lst.get(4).getValue().toString());
                    qe.execute(false);
                }

            }
            qe.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            dbConnection.rollback();
            throw ex;
        }
    }

    public static boolean is_delivery_payment_posted(MainFrame parentJf, Date dt2, double dlv) throws Exception {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        if (parentJf.getMapVars().get("POS_CLOSE_DATE_" + parentJf.getMapVars().get("DEFAULT_LOCATION")) != null) {
            Date dt = sdf.parse(parentJf.getMapVars().get("POS_CLOSE_DATE_" + parentJf.getMapVars().get("DEFAULT_LOCATION")));
            if (dt2.compareTo(dt) <= 0) {
                return false;
            }
        }
        if (dlv >= 0) {
            double flg = Double.valueOf(utils.getSqlValue("select flag from pospur1 where invoice_code=10 and orderno='" + dlv + "'", parentJf.getDbConneciton()));
            if (flg > 1) {
                return false;
            }
        }

        return true;
    }
}
